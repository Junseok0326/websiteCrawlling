library(ggplot2)
getwd()
setwd("C:/Users/wnstj/PycharmProjects/untitled")
data <- read.csv("saraminResult.csv")
data <- data[-c(1:2),]
data <- data[-2]
data <- data[-c(4:5)]
data <- data[-c(9:10)]
data <- data[-3]
data <- data[-1]
View(data)
boxplot(data)
function (..., list = character(), package = NULL, lib.loc = NULL,
verbose = getOption("verbose"), envir = .GlobalEnv)
{
fileExt <- function(x) {
db <- grepl("\\.[^.]+\\.(gz|bz2|xz)$", x)
ans <- sub(".*\\.", "", x)
ans[db] <- sub(".*\\.([^.]+\\.)(gz|bz2|xz)$", "\\1\\2",
x[db])
ans
}
names <- c(as.character(substitute(list(...))[-1L]), list)
if (!is.null(package)) {
if (!is.character(package))
stop("'package' must be a character string or NULL")
if (any(package %in% "base"))
warning("datasets have been moved from package 'base' to package 'datasets'")
if (any(package %in% "stats"))
warning("datasets have been moved from package 'stats' to package 'datasets'")
package[package %in% c("base", "stats")] <- "datasets"
}
paths <- find.package(package, lib.loc, verbose = verbose)
if (is.null(lib.loc))
paths <- c(path.package(package, TRUE), if (!length(package)) getwd(),
paths)
paths <- unique(normalizePath(paths[file.exists(paths)]))
paths <- paths[dir.exists(file.path(paths, "data"))]
dataExts <- tools:::.make_file_exts("data")
if (length(names) == 0L) {
db <- matrix(character(), nrow = 0L, ncol = 4L)
for (path in paths) {
entries <- NULL
packageName <- if (file_test("-f", file.path(path,
"DESCRIPTION")))
basename(path)
else "."
if (file_test("-f", INDEX <- file.path(path, "Meta",
"data.rds"))) {
entries <- readRDS(INDEX)
}
else {
dataDir <- file.path(path, "data")
entries <- tools::list_files_with_type(dataDir,
"data")
if (length(entries)) {
entries <- unique(tools::file_path_sans_ext(basename(entries)))
entries <- cbind(entries, "")
}
}
if (NROW(entries)) {
if (is.matrix(entries) && ncol(entries) == 2L)
db <- rbind(db, cbind(packageName, dirname(path),
entries))
else warning(gettextf("data index for package %s is invalid and will be ignored",
sQuote(packageName)), domain = NA, call. = FALSE)
}
}
colnames(db) <- c("Package", "LibPath", "Item", "Title")
footer <- if (missing(package))
paste0("Use ", sQuote(paste("data(package =", ".packages(all.available = TRUE))")),
"\n", "to list the data sets in all *available* packages.")
else NULL
y <- list(title = "Data sets", header = NULL, results = db,
footer = footer)
class(y) <- "packageIQR"
return(y)
}
paths <- file.path(paths, "data")
for (name in names) {
found <- FALSE
for (p in paths) {
if (file_test("-f", file.path(p, "Rdata.rds"))) {
rds <- readRDS(file.path(p, "Rdata.rds"))
if (name %in% names(rds)) {
found <- TRUE
if (verbose)
message(sprintf("name=%s:\t found in Rdata.rds",
name), domain = NA)
thispkg <- sub(".*/([^/]*)/data$", "\\1",
p)
thispkg <- sub("_.*$", "", thispkg)
thispkg <- paste0("package:", thispkg)
objs <- rds[[name]]
lazyLoad(file.path(p, "Rdata"), envir = envir,
filter = function(x) x %in% objs)
break
}
else if (verbose)
message(sprintf("name=%s:\t NOT found in names() of Rdata.rds, i.e.,\n\t%s\n",
name, paste(names(rds), collapse = ",")),
domain = NA)
}
if (file_test("-f", file.path(p, "Rdata.zip"))) {
warning("zipped data found for package ", sQuote(basename(dirname(p))),
".\nThat is defunct, so please re-install the package.",
domain = NA)
if (file_test("-f", fp <- file.path(p, "filelist")))
files <- file.path(p, scan(fp, what = "",
quiet = TRUE))
else {
warning(gettextf("file 'filelist' is missing for directory %s",
sQuote(p)), domain = NA)
next
}
}
else {
files <- list.files(p, full.names = TRUE)
}
files <- files[grep(name, files, fixed = TRUE)]
if (length(files) > 1L) {
o <- match(fileExt(files), dataExts, nomatch = 100L)
paths0 <- dirname(files)
paths0 <- factor(paths0, levels = unique(paths0))
files <- files[order(paths0, o)]
}
if (length(files)) {
for (file in files) {
if (verbose)
message("name=", name, ":\t file= ...",
.Platform$file.sep, basename(file), "::\t",
appendLF = FALSE, domain = NA)
ext <- fileExt(file)
if (basename(file) != paste0(name, ".", ext))
found <- FALSE
else {
found <- TRUE
zfile <- file
zipname <- file.path(dirname(file), "Rdata.zip")
if (file.exists(zipname)) {
Rdatadir <- tempfile("Rdata")
dir.create(Rdatadir, showWarnings = FALSE)
topic <- basename(file)
rc <- .External(C_unzip, zipname, topic,
Rdatadir, FALSE, TRUE, FALSE, FALSE)
if (rc == 0L)
zfile <- file.path(Rdatadir, topic)
}
if (zfile != file)
on.exit(unlink(zfile))
switch(ext, R = , r = {
library("utils")
sys.source(zfile, chdir = TRUE, envir = envir)
}, RData = , rdata = , rda = load(zfile,
envir = envir), TXT = , txt = , tab = ,
tab.gz = , tab.bz2 = , tab.xz = , txt.gz = ,
txt.bz2 = , txt.xz = assign(name, read.table(zfile,
header = TRUE, as.is = FALSE), envir = envir),
CSV = , csv = , csv.gz = , csv.bz2 = ,
csv.xz = assign(name, read.table(zfile,
header = TRUE, sep = ";", as.is = FALSE),
envir = envir), found <- FALSE)
}
if (found)
break
}
if (verbose)
message(if (!found)
"*NOT* ", "found", domain = NA)
}
if (found)
break
}
if (!found)
warning(gettextf("data set %s not found", sQuote(name)),
domain = NA)
}
invisible(names)
}
toeic <- data[3]
library(ggplot2)
getwd()
setwd("C:/Users/wnstj/PycharmProjects/untitled")
data <- read.csv("saraminResult.csv")
View(data)
data <- read.csv("saraminResult_ComputerMajor.csv")
View(data)
data <- data[-2]
data <- read.csv("saraminResult_ComputerMajor.csv")
View(data)
View(data)
grade <- data[2]
grade <- c(data[2])
grade<-unlist(grade)
grade_max <- max(grade)
grade_min <- min(grade)
grade_avg <- mean(grade)
grade <- c(grade_max,grade_min,grade_avg)
license <- data[3]
license <- c(data[3])
license<-unlist(license)
license_max <- max(license)
license_min <- min(license)
license_avg <- mean(license)
license <- c(license_max,license_min,license_avg)
award <- data[4]
award <- c(data[4])
award<-unlist(award)
award_max <- max(award)
award_min <- min(award)
award_avg <- mean(award)
award <- c(award_max,award_min,award_avg)
intern <- data[5]
intern <- c(data[5])
intern<-unlist(intern)
intern_max <- max(intern)
intern_min <- min(intern)
intern_avg <- mean(intern)
intern <- c(intern_max,intern_min,intern_avg)
overseas <- data[6]
overseas <- c(data[6])
overseas<-unlist(overseas)
overseas_max <- max(overseas)
overseas_min <- min(overseas)
overseas_avg <- mean(overseas)
overseas <- c(overseas_max,overseas_min,overseas_avg)
volunteer <- data[7]
volunteer <- c(data[7])
volunteer<-unlist(volunteer)
volunteer_max <- max(volunteer)
volunteer_min <- min(volunteer)
volunteer_avg <- mean(volunteer)
volunteer <- c(volunteer_max,volunteer_min,volunteer_avg)
ProccesData<-data.frame(grade,license,award,intern,overseas,volunteer)
resultBoxPlot<-boxplot(ProccesData,main="컴퓨터/시스템공학 계열 취업 점수",names=c("학점(점)","자격증(개)","수상(회)","인턴(회)","해외(회)","봉사(회)"),col=c("steelblue4","steelblue3","steelblue2","steelblue1","slategray3","snow3"))
